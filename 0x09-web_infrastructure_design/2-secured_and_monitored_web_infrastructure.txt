https://imgur.com/a/xHARDci

For every additional element, why you are adding it?
we add fire walls to protect our load-balancer and our data base from unauthorized access or attacks
using HTTPS makes the communication between the server and the web browser more secure and protect user information
and ecrypt data. helps to ensure the integrity of the data that is transmitted.

What are firewalls for?
a firewall is a crucial security component which can be hardware-based, software-based, or a combination of both.
that helps protect servers and network from unauthorized access, cyberattacks, and other security threats.

Why is the traffic served over HTTPS?
using HTTPS makes the communication between the server and the web browser more secure and protect user information
and ecrypt data.

What monitoring is used for?
monitoring is crucial to measure the performance of the server and identify the issues in the system.

How the monitoring tool is collecting data?
 Some common types of monitoring tools include network monitoring tools, server monitoring tools
 application performance monitoring tools, and website monitoring tools.

Explain what to do if you want to monitor your web server QPS?
we can use a variety of tools to do so.we will first need to install and configure them on our web server.
Then, we can use their respective dashboards or APIs to monitor our web server’s QPS in real-time.
we can also set up alerts to notify us if our web server’s QPS exceeds a certain threshold, so we can take action if necessary.

Why terminating SSL at the load balancer level is an issue?
Terminating SSL at the load balancer level can cause a number of issues. For one, it can create a single point of failure,
since all SSL traffic has to pass through the load balancer.
terminating SSL at the load balancer level can create performance bottlenecks, since
the load balancer now has to handle the additional processing required to encrypt and decrypt all SSL traffic.

Why having only one MySQL server capable of accepting writes is an issue.
it can create a single point of failure in our system.
If that server goes down for any reason, our entire system will be unable to accept writes
Additionally, having a single server that is responsible for accepting all writes can lead to performance bottlenecks,
as the server may become overwhelmed by the volume of incoming write requests.

Why having servers with all the same components (database, web server and application server) might be a problem?
if one of those components experiences an issue or fails. If a server’s database, for example,
goes down, it can take the rest of the system down with it. 
It’s generally considered a best practice to have different servers for different components to increase reliability
and reduce the impact of any potential issues.
